{
	"name": "DF_Cleanse",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Raw_FilePath_Json",
						"type": "DatasetReference"
					},
					"name": "JSONRaw"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "datalake",
						"type": "LinkedServiceReference"
					},
					"name": "sinkToCSV",
					"rejectedDataLinkedService": {
						"referenceName": "datalake",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "mapJSONHierarchySubcolumns"
				}
			],
			"scriptLines": [
				"parameters{",
				"     SinkFolder as string,",
				"     FileName as string",
				"}",
				"source(output(",
				"          attributes as (employment_status as (label as string, name as string, type as string), interests as (label as string, name as string, type as string), state as (label as string, name as string, type as string)),",
				"          nice as (address as string, address_oneline as string, age as short, available_by_default as boolean, background_check_user as string[], delete_requested as boolean, duplicate_status as string, email_verified as boolean, employment_status as string, first_name as string, given_names as string, google2fa_enabled as boolean, info as string, interests as string, {interests:array} as string, {interests:value} as string, is_subscribed as boolean, is_team_leader as boolean, last_name as string, login_locked as boolean, middle_name as string, name as string, phone as string, {phone:raw} as long, picture_status as string, preferred_first_name as string, preferred_name as string, rrn as string, shift_privacy as boolean, state as string, team_member_id as string, terms as boolean, updated_hours as short),",
				"          object as (account_id as short, address as (city as string, coordinates as (latitude as double, longitude as double), country as string, iso as string, latitude as double, longitude as double, postcode as short, region as string, street_address_1 as string, street_address_2 as string, street_address_3 as string), created_at as string, delete_requested_at as string, deleted_at as string, deleted_by as string, dob as date, email as string, email_verified as boolean, employment_status as string, first_name as string, id as integer, id_token as string, interests as string, is_subscribed as boolean, is_team_leader as boolean, is_unreachable as boolean, last_login_at as timestamp, last_name as string, login_lockout_at as string, login_lockout_attempts as short, login_lockout_email_sent_at as string, middle_name as string, phone as string, picture as string, picture_status as boolean, preferred_name as string, rating as double, shift_privacy as boolean, state as string, team_member_id as string, terms as boolean, updated_at as string, verify_email_token as string),",
				"          permissions as (delete as boolean, impersonate as boolean, read as boolean, update as boolean),",
				"          relations as string[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     backslashEscape: true) ~> JSONRaw",
				"JSONRaw select(mapColumn(",
				"          each(object,match(true()),",
				"               'object_'+$$ = $$),",
				"          each(nice,match(true()),",
				"               'nice_'+$$ = $$),",
				"          each(permissions,match(true()),",
				"               'permissions_'+$$ = $$),",
				"          each(attributes.employment_status,match(true()),",
				"               'attributes_employment_status_'+$$ = $$),",
				"          each(attributes.state,match(true()),",
				"               'attributes_employment_state_'+$$ = $$),",
				"          each(object.address,match(true()),",
				"               'object_address_'+$$ = $$),",
				"          each(object.address.coordinates,match(true()),",
				"               'object_address_coordinates_'+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> mapJSONHierarchySubcolumns",
				"mapJSONHierarchySubcolumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'cleansed',",
				"     folderPath: ($SinkFolder),",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkToCSV"
			]
		}
	}
}