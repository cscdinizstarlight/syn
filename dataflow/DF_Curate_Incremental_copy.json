{
	"name": "DF_Curate_Incremental_copy",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "datalake",
						"type": "LinkedServiceReference"
					},
					"name": "todayCleansedData"
				},
				{
					"linkedService": {
						"referenceName": "datalake",
						"type": "LinkedServiceReference"
					},
					"name": "allRosterfyUser"
				},
				{
					"linkedService": {
						"referenceName": "datalake",
						"type": "LinkedServiceReference"
					},
					"name": "getAllRecords"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Curated_Rosterfy_User",
						"type": "DatasetReference"
					},
					"name": "sinkIncrementalData"
				},
				{
					"name": "cacheMaxSurrKey"
				}
			],
			"transformations": [
				{
					"name": "addRowHash"
				},
				{
					"name": "AddSurrogateKey"
				},
				{
					"name": "keepRowHash"
				},
				{
					"name": "chkNewRows"
				},
				{
					"name": "seedSurrogateKey"
				},
				{
					"name": "addDateColumn"
				},
				{
					"name": "MaxSurrogateKey"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				}
			],
			"scriptLines": [
				"parameters{",
				"     DFParamPLTriggerTime as timestamp (toTimestamp('1999-01-01 00:00:01')),",
				"     SinkFolder as string ('Rosterfy/Event'),",
				"     SurrogateColumn as string ('SurrogateKey'),",
				"     CurrentSinkFolder as string ('Rosterfy/Event/2022/09/09'),",
				"     CurrentFileName as string ('part-00000-5c4afb30-fcac-428a-b027-6b12b459b737-c000.csv')",
				"}",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'cleansed',",
				"     folderPath: ($CurrentSinkFolder),",
				"     fileName: ($CurrentFileName),",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     multiLineRow: true) ~> todayCleansedData",
				"source(output(",
				"          address as string,",
				"          address_oneline as string,",
				"          age as string,",
				"          available_by_default as string,",
				"          background_check_user as string,",
				"          delete_requested as string,",
				"          duplicate_status as string,",
				"          email_verified as string,",
				"          employment_status as string,",
				"          first_name as string,",
				"          given_names as string,",
				"          google2fa_enabled as string,",
				"          info as string,",
				"          interests as string,",
				"          {interests:array} as string,",
				"          {interests:value} as string,",
				"          is_subscribed as string,",
				"          is_team_leader as string,",
				"          last_name as string,",
				"          login_locked as string,",
				"          middle_name as string,",
				"          name as string,",
				"          phone as string,",
				"          {phone:raw} as string,",
				"          picture_status as string,",
				"          preferred_first_name as string,",
				"          preferred_name as string,",
				"          rrn as string,",
				"          shift_privacy as string,",
				"          state as string,",
				"          team_member_id as string,",
				"          terms as string,",
				"          updated_hours as string,",
				"          apply as string,",
				"          apps_close_timestamp as string,",
				"          apps_close_timestamp__date as string,",
				"          apps_close_timestamp__offset as string,",
				"          apps_close_timestamp__offset_minutes as string,",
				"          apps_close_timestamp__time as string,",
				"          apps_open_timestamp as string,",
				"          apps_open_timestamp__date as string,",
				"          apps_open_timestamp__offset as string,",
				"          apps_open_timestamp__offset_minutes as string,",
				"          apps_open_timestamp__time as string,",
				"          end_timestamp as string,",
				"          end_timestamp__date as string,",
				"          end_timestamp__offset as string,",
				"          end_timestamp__offset_minutes as string,",
				"          end_timestamp__time as string,",
				"          event_template_id as string,",
				"          {event_template_id:array} as string,",
				"          {event_template_id:value} as string,",
				"          event_type_id as string,",
				"          {event_type_id:array} as string,",
				"          {event_type_id:value} as string,",
				"          event_type_name as string,",
				"          expression_of_interest as string,",
				"          expression_of_interest_form_completed_at as string,",
				"          full_name as string,",
				"          grid_list_image as string,",
				"          has_payrun as string,",
				"          is_eoi_demand_met as string,",
				"          is_virtual as string,",
				"          min_shifts as string,",
				"          post_event_feedback_form_completed_at as string,",
				"          promoted as string,",
				"          role_offer_address as string,",
				"          self_checkin as string,",
				"          shift_application_form_id_default as string,",
				"          {shift_application_form_id_default:array} as string,",
				"          {shift_application_form_id_default:value} as string,",
				"          shift_attended_form_id_default as string,",
				"          {shift_attended_form_id_default:array} as string,",
				"          {shift_attended_form_id_default:value} as string,",
				"          shift_checkin_form_id_default as string,",
				"          {shift_checkin_form_id_default:array} as string,",
				"          {shift_checkin_form_id_default:value} as string,",
				"          shift_checkout_form_id_default as string,",
				"          {shift_checkout_form_id_default:array} as string,",
				"          {shift_checkout_form_id_default:value} as string,",
				"          shift_feedback_form_id_default as string,",
				"          {shift_feedback_form_id_default:array} as string,",
				"          {shift_feedback_form_id_default:value} as string,",
				"          shift_precheckin_form_id_default as string,",
				"          {shift_precheckin_form_id_default:array} as string,",
				"          {shift_precheckin_form_id_default:value} as string,",
				"          start_timestamp as string,",
				"          start_timestamp__date as string,",
				"          start_timestamp__offset as string,",
				"          start_timestamp__offset_minutes as string,",
				"          start_timestamp__time as string,",
				"          status as string,",
				"          {status:array} as string,",
				"          {status:value} as string,",
				"          tags as string,",
				"          {tags:array} as string,",
				"          {tags:value} as string,",
				"          visibility_hide_groups as string,",
				"          visibility_show_groups as string,",
				"          visibility_show_roleoffer as string,",
				"          account_id as string,",
				"          created_at as string,",
				"          delete_requested_at as string,",
				"          deleted_at as string,",
				"          deleted_by as string,",
				"          dob as string,",
				"          email as string,",
				"          id as string,",
				"          id_token as string,",
				"          is_unreachable as string,",
				"          last_login_at as string,",
				"          login_lockout_at as string,",
				"          login_lockout_attempts as string,",
				"          login_lockout_email_sent_at as string,",
				"          picture as string,",
				"          rating as string,",
				"          updated_at as string,",
				"          verify_email_token as string,",
				"          banner_image as string,",
				"          certificate_id as string,",
				"          checkin_visible_attributes as string,",
				"          description as string,",
				"          eoi_demand as string,",
				"          expression_of_interest_form as string,",
				"          gap_between_shifts as string,",
				"          geofence_checkin_limit_default as string,",
				"          grid_image as string,",
				"          is_archived as string,",
				"          is_cancelled as string,",
				"          leader_shift_filter_attributes as string,",
				"          max_shift_apps_per_shift_type as string,",
				"          max_shift_apps_per_user as string,",
				"          max_waitlist as string,",
				"          min_shift_apps_per_shift_type as string,",
				"          min_shift_apps_per_user as string,",
				"          minimum_age as string,",
				"          minimum_dob as string,",
				"          parent_id as string,",
				"          path as string,",
				"          post_feedback as string,",
				"          post_feedback_form as string,",
				"          post_feedback_publish_at as string,",
				"          public as string,",
				"          public_shift as string,",
				"          public_shift_default as string,",
				"          self_checkin_close as string,",
				"          self_checkin_open as string,",
				"          self_checkout_close as string,",
				"          shift_can_confirm_limit as string,",
				"          shift_can_withdraw_default as string,",
				"          shift_can_withdraw_limit as string,",
				"          shift_checked_in_status_default as string,",
				"          shift_confirmed_status_default as string,",
				"          shift_enable_waitlist_default as string,",
				"          shift_filter_attributes as string,",
				"          shift_precheckin_open_default as string,",
				"          shift_rejected_status_default as string,",
				"          shift_status_default as string,",
				"          timezone as string,",
				"          token as string,",
				"          training_ids as string,",
				"          rowHash as string,",
				"          InsertedOn as timestamp,",
				"          SurrogateKey as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     fileSystem: 'curated',",
				"     wildcardPaths:[(concat($SinkFolder, \"/*/*/*/*.parquet\"))]) ~> allRosterfyUser",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     fileSystem: 'curated',",
				"     wildcardPaths:[(concat($SinkFolder, \"/*/*/*/*.parquet\"))]) ~> getAllRecords",
				"todayCleansedData derive(rowHash = sha2(256, columns())) ~> addRowHash",
				"addDateColumn keyGenerate(output(SurrogateKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddSurrogateKey",
				"select2 select(mapColumn(",
				"          each(match(true()),",
				"               'rowHash' = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> keepRowHash",
				"select3, keepRowHash exists(select3@rowHash == keepRowHash@rowHash,",
				"     negate:true,",
				"     broadcast: 'auto')~> chkNewRows",
				"AddSurrogateKey derive(SurrogateKey = SurrogateKey + cacheMaxSurrKey#outputs()[1].SurrogateKey) ~> seedSurrogateKey",
				"chkNewRows derive(InsertedOn = $DFParamPLTriggerTime) ~> addDateColumn",
				"select1 aggregate(each(match(true()), $$ = max($$))) ~> MaxSurrogateKey",
				"getAllRecords select(mapColumn(",
				"          each(match(locate('surrogatekey', lower(name))==1),",
				"               'SurrogateKey' = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"allRosterfyUser select(mapColumn(",
				"          each(match(locate('rowhash', lower(name))==1),",
				"               'rowHash' = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"addRowHash select(mapColumn(",
				"          rowHash",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"seedSurrogateKey sink(allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkIncrementalData",
				"MaxSurrogateKey sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> cacheMaxSurrKey"
			]
		}
	}
}