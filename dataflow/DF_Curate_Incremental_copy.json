{
	"name": "DF_Curate_Incremental_copy",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "datalake",
						"type": "LinkedServiceReference"
					},
					"name": "todayCleansedData"
				},
				{
					"linkedService": {
						"referenceName": "datalake",
						"type": "LinkedServiceReference"
					},
					"name": "allRosterfyUser"
				},
				{
					"linkedService": {
						"referenceName": "datalake",
						"type": "LinkedServiceReference"
					},
					"name": "getAllRecords"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Curated_Rosterfy_User",
						"type": "DatasetReference"
					},
					"name": "sinkIncrementalData"
				},
				{
					"name": "cacheMaxSurrKey"
				}
			],
			"transformations": [
				{
					"name": "selectCuratedColumns"
				},
				{
					"name": "addRowHash"
				},
				{
					"name": "AddSurrogateKey"
				},
				{
					"name": "keepRowHash"
				},
				{
					"name": "chkNewRows"
				},
				{
					"name": "seedSurrogateKey"
				},
				{
					"name": "addDateColumn"
				},
				{
					"name": "MaxSurrogateKey"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"parameters{",
				"     DFParamPLTriggerTime as timestamp (toTimestamp('1999-01-01 00:00:01')),",
				"     SinkFolder as string,",
				"     SurrogateColumn as string ('SurrogateKey'),",
				"     CurrentSinkFolder as string,",
				"     CurrentFileName as string",
				"}",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'cleansed',",
				"     folderPath: ($CurrentSinkFolder),",
				"     fileName: ($CurrentFileName),",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false) ~> todayCleansedData",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     fileSystem: 'curated',",
				"     wildcardPaths:[(concat($SinkFolder, \"/*/*/*/*.parquet\"))]) ~> allRosterfyUser",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     fileSystem: 'curated',",
				"     wildcardPaths:[(concat($SinkFolder, \"/*/*/*/*.parquet\"))]) ~> getAllRecords",
				"todayCleansedData select(mapColumn(",
				"          id = object_id,",
				"          email = object_email,",
				"          object_first_name,",
				"          object_middle_name,",
				"          object_last_name,",
				"          object_preferred_name,",
				"          object_is_subscribed,",
				"          is_unreachable = object_is_unreachable,",
				"          object_terms,",
				"          rating = object_rating,",
				"          object_shift_privacy,",
				"          object_is_team_leader,",
				"          object_email_verified,",
				"          last_login_at = object_last_login_at,",
				"          delete_requested_at = object_delete_requested_at,",
				"          deleted_at = object_deleted_at,",
				"          created_at = object_created_at,",
				"          updated_at = object_updated_at,",
				"          object_team_member_id,",
				"          object_state,",
				"          object_employment_status,",
				"          nice_email_verified,",
				"          nice_first_name,",
				"          nice_is_subscribed,",
				"          nice_is_team_leader,",
				"          nice_last_name,",
				"          nice_middle_name,",
				"          nice_phone,",
				"          nice_preferred_name,",
				"          nice_shift_privacy,",
				"          nice_terms,",
				"          nice_employment_status,",
				"          nice_state,",
				"          nice_team_member_id,",
				"          nice_name,",
				"          age = nice_age,",
				"          preferred_first_name = nice_preferred_first_name,",
				"          available_by_default = nice_available_by_default,",
				"          google2fa_enabled = nice_google2fa_enabled,",
				"          nice_picture_status,",
				"          delete_requested = object_delete_requested_at,",
				"          updated_hours = nice_updated_hours",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCuratedColumns",
				"selectCuratedColumns derive(rowHash = sha2(256, columns())) ~> addRowHash",
				"addDateColumn keyGenerate(output(SurrogateKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddSurrogateKey",
				"select2 select(mapColumn(",
				"          each(match(true()))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> keepRowHash",
				"addRowHash, keepRowHash exists(addRowHash@rowHash==keepRowHash@rowHash,",
				"     negate:true,",
				"     broadcast: 'auto')~> chkNewRows",
				"AddSurrogateKey derive(SurrogateKey = SurrogateKey + cacheMaxSurrKey#outputs()[1].maxSurrogateKey) ~> seedSurrogateKey",
				"chkNewRows derive(InsertedOn = $DFParamPLTriggerTime) ~> addDateColumn",
				"select1 aggregate(each(match(true()), $$ = max($$))) ~> MaxSurrogateKey",
				"getAllRecords select(mapColumn(",
				"          each(match(locate('surrogatekey', lower(name))==1),",
				"               'SurrogateKey' = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"allRosterfyUser select(mapColumn(",
				"          each(match(locate('rowhash', lower(name))==1),",
				"               'rowHash' = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"seedSurrogateKey sink(allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkIncrementalData",
				"MaxSurrogateKey sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> cacheMaxSurrKey"
			]
		}
	}
}